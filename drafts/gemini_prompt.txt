こんにちは、Gemini。Flask Webアプリケーション「もとぷっぷー」の開発支援をお願いします。

1.  **プロジェクト概要:**

      * 名称: もとぷっぷー
      * 目的: オートバイ所有者向けの車両情報、燃費、整備記録、リマインダー、メモ管理、実績、**そして活動・セッティング記録**Webアプリ。公道走行車両に加え、レーサーやモトクロッサーといった競技用車両の管理にも対応。
      * 認証: Misskey MiAuth

2.  **主要技術スタック:**

      * バックエンド: Python, Flask, SQLAlchemy, PostgreSQL (本番: Render)
      * フロントエンド: Jinja2, Bootstrap 5, JavaScript
      * フォーム処理: Flask-WTF (バリデーション、CSRF対策)
      * DBマイグレーション: Flask-Migrate (Alembic)
      * デプロイ: Render (Gunicorn)
      * 開発環境: Podman (Mac/Fedora), Python venv
      * その他: python-dotenv, requests, python-dateutil, zoneinfo (Python 3.9+)

3.  **アーキテクチャ・構成:**

      * 標準的なFlask構成（アプリケーションファクトリ使用）。
      * 機能ごとにBlueprintを使用 (auth, main, vehicle, fuel, maintenance, notes, achievements, **activity** など)。
      * `models.py` にDBモデル定義 (`User`, `Motorcycle`, `FuelEntry`, `MaintenanceEntry`, `OdoResetLog`, `GeneralNote`, `AchievementDefinition`, `UserAchievement`, **`SettingSheet`, `ActivityLog`, `SessionLog`** など)。
      * `forms.py` にFlask-WTFフォームクラス定義。
      * `motopuppu/views/` 以下に各Blueprintのルート定義。
      * `templates/`, `static/` ディレクトリ。
      * **グローバルな車両リストの読み込み:** `@before_request` ハンドラで、ログインユーザーの車両リストを `g.user_motorcycles` に格納し、ナビゲーションバーのドロップダウンメニューで使用。

4.  **主要な実装済み機能:**

      * ユーザー認証 (Misskey MiAuth, ローカル開発用ログイン)
      * 車両管理 (CRUD, 複数対応、デフォルト設定)
          * **レーサー車両と公道車両の区別** (総稼働時間またはODOメーターでの管理)
      * ODOメーターリセット機能 (公道車両向けCRUD)
      * 給油記録 (公道車両向けCRUD, ログ表示, フィルター/ソート, CSVエクスポート)
      * 整備記録 (公道車両向けCRUD, ログ表示, フィルター/ソート, CSVエクスポート)
      * ノート (CRUD、カテゴリ別[ノート/タスクリスト], ログ表示, フィルター)
      * メンテナンスリマインダー (CRUD)
      * ダッシュボード (統計概要, FullCalendar表示, フィルター機能)
      * 実績機能 (イベントドリブンな解除、遡及処理用CLIコマンド)
      * Misskey共有機能
      * **活動ログ & セッティングシート機能 (ベータ版):**
          * **目的:** サーキット走行やツーリングなど、特定の活動における車両セッティングとパフォーマンスを記録・管理。
          * **対象:** **公道・レーサーを問わず全車両で利用可能。**
          * **`SettingSheet` (セッティングシート):**
              * サスペンション、タイヤ等のセットアップ情報を「テンプレート」として名前を付けて保存 (CRUD)。
              * アーカイブ（論理削除）機能。
              * JavaScriptによる動的フォームで、記録したいカテゴリ（サス、タイヤ等）を自由に追加・削除可能。データはJSONBで柔軟に保存。
          * **`ActivityLog` (活動ログ):**
              * 「7/5の走行会」のように、日付や場所、天候といった1日の活動をまとめるコンテナとして記録 (CRUD)。
          * **`SessionLog` (セッションログ):**
              * 活動ログの中で、「1本目」「2本目」のような個別の走行セッションを記録 (CRUD)。
              * セッションごとに、作成済みの`SettingSheet`を選択して紐付け。
              * ライダーの所感や、車両タイプに応じた走行前後のODO/稼働時間を記録。
          * **UI/UX:**
              * ナビゲーションバーの「活動ログ」から、ドロップダウンメニューで直接各車両の活動ログ一覧へアクセス可能。

5.  **現在の状況・課題 [次回更新]:**

      * **マイグレーション:**
          * **最新リビジョン: `(ここに 'Add activity log models' のマイグレーションIDを記載)`** (要 `flask db history` で確認)
          * `Motorcycle`に`is_racer`, `total_operating_hours`カラム追加済み。
          * **`SettingSheet`, `ActivityLog`, `SessionLog` テーブルを追加済み。**
      * **直近の作業 (完了済み):**
          * **「活動ログ & セッティングシート機能 (フェーズ2)」の追加:**
              * `SettingSheet`, `ActivityLog`, `SessionLog` モデルと関連リレーションシップを定義し、DBマイグレーションを実行。
              * 活動ログ、セッション、セッティングシートのCRUD（作成・読み取り・更新・削除/アーカイブ）機能を持つ `activity` Blueprintを実装。
              * ナビゲーションバーから車両を選択して活動ログへアクセスできるドロップダウンメニューを実装（`@before_request`ハンドラ利用）。
              * 車両管理ページから各車両の活動ログへの導線を設置。
              * 動的なセッティングシートフォームをJavaScriptで実装。
      * **現在の課題・改善点:**
          * a. **テストコードの拡充:** **新しく実装した活動ログ機能群**に対する単体テスト・結合テストの作成が急務。
          * b. **活動ログ機能のUI/UX改善:** ラップタイムの入力・表示UI、セッティングシートの複製機能など、より使いやすくするための改善。
          * c. **レーサー車両向け機能の拡充 (フェーズ2残件/フェーズ3):** 稼働時間ベースの**整備記録**機能。
          * d. **重要コンポーネントのライフサイクル管理 (フェーズ3):** 今回実装したセッションログのデータを活用した、より精度の高い部品寿命の追跡機能。
          * e. 既存の課題 (CSRF、DB制約、リファクタリングなど)。

6.  **現在のプロジェクトディレクトリ:**

    ```
kyagisaw@kyagisaw-mac motopuppu % tree
.
kyagisaw@hiyoko-pc:/mnt/c/Users/hiyoko/Dev/motopuppu$ tree
.
├── announcements.json
├── compose.yml
├── Dockerfile
├── drafts
│   ├── gemini_prompt.txt
│   └── racer_draft.md
├── instance
├── LICENSE
├── migrations
│   ├── alembic.ini
│   ├── env.py
│   ├── README
│   ├── script.py.mako
│   └── versions
│       ├── 03b74d3f953e_add_criteria_column_to_.py
│       ├── 2611ecc6c187_add_avatar_url_to_user_model.py
│       ├── 3c3d01d7c4c9_add_exclude_from_average_to_fuel_entries.py
│       ├── 3f7f9b1139eb_add_activity_log_models.py
│       ├── 3f8fa3c5156e_add_maintenance_record_link_to_reminders.py
│       ├── 414794921235_add_achievement_and_userachievement_.py
│       ├── 48c543b24155_add_activity_log_models.py
│       ├── 4bc80d3366bf_add_activity_log_models.py
│       ├── 4ec29611c9b5_add_trigger_event_type_to_.py
│       ├── 5d18f0a4938e_allow_null_for_content_in_general_notes.py
│       ├── 6a92e8863546_link_activity_log_to_event.py
│       ├── 6dadc8ff0649_add_racer_fields_to_motorcycle.py
│       ├── 760969e7b61d_populate_new_achievement_definitions_.py
│       ├── 896791ff77ea_add_odo_reset_log_table_and_data_.py
│       ├── 9516bc768302_add_event_and_event_participant_models.py
│       ├── c9271122696a_add_passcode_hash_to_event_participants.py
│       ├── cb61b6485ca8_add_missing_general_notes_and_odo_reset_.py
│       ├── cbc2495d2f76_initial_migration.py
│       ├── cd7db2474a21_check_sync_after_fixing_relationship.py
│       ├── d5b35174a1cb_add_display_name_to_user_model.py
│       ├── df2ec8ec945c_add_last_done_odo_to_maintenancereminder.py
│       └── f0c7fc2c92ad_add_auto_update_from_category_to_.py
├── motopuppu
│   ├── achievement_evaluator.py
│   ├── achievements_utils.py
│   ├── constants.py
│   ├── forms.py
│   ├── __init__.py
│   ├── manage_commands.py
│   ├── models.py
│   ├── parsers
│   │   ├── base_parser.py
│   │   ├── __init__.py
│   │   ├── mylaps_parser.py
│   │   ├── simple_csv_parser.py
│   │   └── ziix_parser.py
│   ├── services.py
│   ├── static
│   │   ├── css
│   │   │   └── style.css
│   │   ├── favicons
│   │   │   ├── apple-touch-icon.png
│   │   │   ├── favicon-96x96.png
│   │   │   ├── favicon.ico
│   │   │   ├── favicon.svg
│   │   │   ├── web-app-manifest-192x192.png
│   │   │   └── web-app-manifest-512x512.png
│   │   ├── images
│   │   │   └── blobcat_8bit.webp
│   │   ├── js
│   │   │   ├── lap_time_manager.js
│   │   │   ├── misskey_share.js
│   │   │   └── odo_toggle.js
│   │   └── manifest.json
│   ├── templates
│   │   ├── achievements
│   │   │   └── unlocked_list.html
│   │   ├── activity
│   │   │   ├── activity_form.html
│   │   │   ├── best_settings.html
│   │   │   ├── compare_sessions.html
│   │   │   ├── detail_activity.html
│   │   │   ├── list_activities.html
│   │   │   ├── list_settings.html
│   │   │   ├── session_form.html
│   │   │   └── setting_form.html
│   │   ├── auth
│   │   │   └── delete_account_complete.html
│   │   ├── base.html
│   │   ├── dashboard.html
│   │   ├── event
│   │   │   ├── event_detail.html
│   │   │   ├── event_form.html
│   │   │   ├── list_events.html
│   │   │   └── public_event_view.html
│   │   ├── fuel_form.html
│   │   ├── fuel_log.html
│   │   ├── index.html
│   │   ├── leaderboard
│   │   │   ├── index.html
│   │   │   └── ranking.html
│   │   ├── legal
│   │   │   ├── privacy_policy.html
│   │   │   └── terms_of_service.html
│   │   ├── maintenance_form.html
│   │   ├── maintenance_log.html
│   │   ├── navigation.html
│   │   ├── note_form.html
│   │   ├── notes_log.html
│   │   ├── odo_reset_log_form.html
│   │   ├── profile
│   │   │   └── settings.html
│   │   ├── reminder
│   │   │   ├── list_reminders.html
│   │   │   └── reminder_form.html
│   │   ├── vehicle_form.html
│   │   └── vehicles.html
│   ├── utils
│   │   ├── datetime_helpers.py
│   │   └── lap_time_utils.py
│   └── views
│       ├── achievements.py
│       ├── activity
│       │   ├── activity_routes.py
│       │   ├── __init__.py
│       │   ├── session_routes.py
│       │   └── setting_routes.py
│       ├── auth.py
│       ├── dev_auth.py
│       ├── event.py
│       ├── fuel.py
│       ├── leaderboard.py
│       ├── main.py
│       ├── maintenance.py
│       ├── notes.py
│       ├── profile.py
│       ├── reminder.py
│       └── vehicle.py
├── README.md
└── requirements.txt

24 directories, 111 files
    ```

7.  **今回のセッションでの目標 [毎回更新]:**
      * 
      * 現在の実装について確認が必要なファイルを指定してください。それらのファイルを送付するので、すべて確認してから実装案を作成してください

      
8.  **Geminiに期待する役割:**

      * コードの提案、修正案の提示 (ファイル全体の表示希望)
      * 実装に関する質問への回答
      * コードレビュー
      * エラー分析と解決策の提案

9.  **その他 [必要に応じて]:**

      * DBスキーマの変更については、過去に問題が発生した経験があるため、特に慎重に進めたい。
      * 修正は既存のUIや他の機能への影響を最小限に抑えたい。
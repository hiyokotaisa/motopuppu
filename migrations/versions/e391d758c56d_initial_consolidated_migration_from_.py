"""Initial consolidated migration from existing models

Revision ID: e391d758c56d
Revises: 
Create Date: 2025-08-11 10:56:05.795060

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e391d758c56d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Step 1: 依存関係の親となるテーブルから順に作成 ---
    
    # `users` テーブルを作成 (循環参照する外部キーは後で追加)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('misskey_user_id', sa.String(length=100), nullable=False),
    sa.Column('misskey_username', sa.String(length=100), nullable=True),
    sa.Column('display_name', sa.String(length=100), nullable=True, comment='ユーザーが設定する表示名'),
    sa.Column('avatar_url', sa.String(length=2048), nullable=True, comment='MisskeyのアバターURL'),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('dashboard_layout', sa.JSON(), nullable=True, comment='ダッシュボードのウィジェットの並び順'),
    sa.Column('public_id', sa.String(length=36), nullable=True, comment='公開ガレージ用の一意なID'),
    sa.Column('is_garage_public', sa.Boolean(), server_default='false', nullable=False, comment='ガレージカードを公開するか'),
    sa.Column('garage_theme', sa.String(length=50), server_default='default', nullable=False, comment='ガレージカードのデザインテーマ'),
    sa.Column('garage_hero_vehicle_id', sa.Integer(), nullable=True, comment='ガレージの主役車両ID'),
    sa.Column('show_cost_in_dashboard', sa.Boolean(), server_default='true', nullable=False, comment='ダッシュボードでコスト関連情報を表示するか'),
    sa.Column('encrypted_misskey_api_token', sa.Text(), nullable=True, comment='暗号化されたMisskey APIトークン'),
    # ★★★ 循環参照のため、motorcyclesへの外部キー制約は後で追加する ★★★
    # sa.ForeignKeyConstraint(['garage_hero_vehicle_id'], ['motorcycles.id'], ondelete='SET NULL'), 
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('misskey_user_id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_public_id'), ['public_id'], unique=True)

    # `motorcycles` テーブルを作成 (usersへの外部キーはここで設定可能)
    op.create_table('motorcycles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('maker', sa.String(length=80), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('odometer_offset', sa.Integer(), server_default='0', nullable=False),
    sa.Column('is_default', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('is_racer', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('total_operating_hours', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('image_url', sa.String(length=2048), nullable=True, comment='車両画像のURL'),
    sa.Column('custom_details', sa.Text(), nullable=True, comment='カスタム箇所のメモ'),
    sa.Column('show_in_garage', sa.Boolean(), server_default='true', nullable=False, comment='ガレージカードに掲載するか'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    
    # 外部キーを持たない `achievement_definitions` を作成
    op.create_table('achievement_definitions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('icon_class', sa.String(length=100), nullable=True),
    sa.Column('category_code', sa.String(length=50), nullable=False),
    sa.Column('category_name', sa.String(length=100), nullable=False),
    sa.Column('share_text_template', sa.Text(), nullable=True),
    sa.Column('trigger_event_type', sa.String(length=100), nullable=True),
    sa.Column('criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('achievement_definitions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_achievement_definitions_category_code'), ['category_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_achievement_definitions_code'), ['code'], unique=True)
        batch_op.create_index(batch_op.f('ix_achievement_definitions_trigger_event_type'), ['trigger_event_type'], unique=False)

    # --- Step 2: 残りのテーブルを作成 ---

    op.create_table('consumable_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('change_date', sa.Date(), nullable=False),
    sa.Column('brand_name', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('odometer_reading_at_change', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('public_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='イベント作成者のID'),
    sa.Column('motorcycle_id', sa.Integer(), nullable=True, comment='関連する車両のID'),
    sa.Column('title', sa.String(length=200), nullable=False, comment='イベント名'),
    sa.Column('description', sa.Text(), nullable=True, comment='イベントの詳細説明'),
    sa.Column('location', sa.String(length=200), nullable=True, comment='開催場所'),
    sa.Column('start_datetime', sa.DateTime(), nullable=False, comment='開始日時 (UTC)'),
    sa.Column('end_datetime', sa.DateTime(), nullable=True, comment='終了日時 (UTC)'),
    sa.Column('is_public', sa.Boolean(), server_default='true', nullable=False, comment='イベント一覧に公開するか'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_events_is_public'), ['is_public'], unique=False)
        batch_op.create_index(batch_op.f('ix_events_public_id'), ['public_id'], unique=True)

    op.create_table('fuel_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('entry_date', sa.Date(), nullable=False),
    sa.Column('odometer_reading', sa.Integer(), nullable=False),
    sa.Column('total_distance', sa.Integer(), server_default='0', nullable=False),
    sa.Column('fuel_volume', sa.Float(), nullable=False),
    sa.Column('price_per_liter', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('station_name', sa.String(length=100), nullable=True),
    sa.Column('fuel_type', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_full_tank', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('exclude_from_average', sa.Boolean(), server_default='false', nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fuel_entries', schema=None) as batch_op:
        batch_op.create_index('ix_fuel_entries_entry_date', ['entry_date'], unique=False)

    op.create_table('general_notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=True),
    sa.Column('note_date', sa.Date(), nullable=False),
    sa.Column('title', sa.String(length=150), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=20), server_default='note', nullable=False),
    sa.Column('todos', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('general_notes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_general_notes_category'), ['category'], unique=False)

    op.create_table('maintenance_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('maintenance_date', sa.Date(), nullable=False),
    sa.Column('odometer_reading_at_maintenance', sa.Integer(), nullable=False),
    sa.Column('total_distance_at_maintenance', sa.Integer(), server_default='0', nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('parts_cost', sa.Float(), nullable=True),
    sa.Column('labor_cost', sa.Float(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('maintenance_entries', schema=None) as batch_op:
        batch_op.create_index('ix_maintenance_entries_category', ['category'], unique=False)
        batch_op.create_index('ix_maintenance_entries_maintenance_date', ['maintenance_date'], unique=False)

    op.create_table('maintenance_spec_sheets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('sheet_name', sa.String(length=100), nullable=False),
    sa.Column('spec_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('maintenance_spec_sheets', schema=None) as batch_op:
        batch_op.create_index('ix_maintenance_spec_sheets_motorcycle_id', ['motorcycle_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_spec_sheets_sheet_name'), ['sheet_name'], unique=False)
        batch_op.create_index('ix_maintenance_spec_sheets_user_id', ['user_id'], unique=False)

    op.create_table('odo_reset_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('reset_date', sa.Date(), nullable=False),
    sa.Column('display_odo_before_reset', sa.Integer(), nullable=False),
    sa.Column('display_odo_after_reset', sa.Integer(), nullable=False),
    sa.Column('offset_increment', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('odo_reset_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_odo_reset_logs_reset_date'), ['reset_date'], unique=False)

    op.create_table('setting_sheets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('sheet_name', sa.String(length=100), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('setting_sheets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_setting_sheets_sheet_name'), ['sheet_name'], unique=False)

    op.create_table('touring_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('touring_date', sa.Date(), nullable=False),
    sa.Column('memo', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('touring_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_touring_logs_motorcycle_id'), ['motorcycle_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_touring_logs_touring_date'), ['touring_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_touring_logs_user_id'), ['user_id'], unique=False)

    op.create_table('user_achievements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('achievement_code', sa.String(length=100), nullable=False),
    sa.Column('unlocked_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['achievement_code'], ['achievement_definitions.code'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'achievement_code', name='uq_user_achievement')
    )
    with op.batch_alter_table('user_achievements', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_achievements_achievement_code'), ['achievement_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_achievements_user_id'), ['user_id'], unique=False)

    op.create_table('activity_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=True, comment='この活動ログが紐づくイベントのID'),
    sa.Column('activity_date', sa.Date(), nullable=False),
    sa.Column('location_name', sa.String(length=150), nullable=True),
    sa.Column('activity_title', sa.String(length=200), nullable=True, comment='活動名 (例: 7月の走行会)'),
    sa.Column('location_type', sa.String(length=20), nullable=True, comment='場所の種別 (例: circuit, custom)'),
    sa.Column('circuit_name', sa.String(length=150), nullable=True, comment="location_typeが'circuit'の場合のサーキット名"),
    sa.Column('custom_location', sa.String(length=200), nullable=True, comment="location_typeが'custom'の場合の自由入力場所名"),
    sa.Column('weather', sa.String(length=50), nullable=True),
    sa.Column('temperature', sa.Numeric(precision=4, scale=1), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('activity_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_activity_logs_activity_date'), ['activity_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_activity_logs_circuit_name'), ['circuit_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_activity_logs_event_id'), ['event_id'], unique=False)

    op.create_table('attachments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('maintenance_entry_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('filepath', sa.String(length=512), nullable=False),
    sa.Column('upload_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['maintenance_entry_id'], ['maintenance_entries.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('filepath')
    )
    op.create_table('event_participants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='参加者名'),
    sa.Column('status', sa.Enum('attending', 'tentative', 'not_attending', name='participationstatus'), nullable=False, comment='出欠ステータス'),
    sa.Column('passcode_hash', sa.String(length=255), nullable=True, comment='出欠変更用のパスコードのハッシュ'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event_id', 'name', name='uq_event_participant_name')
    )
    with op.batch_alter_table('event_participants', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_participants_event_id'), ['event_id'], unique=False)

    op.create_table('maintenance_reminders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('motorcycle_id', sa.Integer(), nullable=False),
    sa.Column('task_description', sa.String(length=200), nullable=False, comment='リマインド内容/カテゴリ'),
    sa.Column('interval_km', sa.Integer(), nullable=True),
    sa.Column('interval_months', sa.Integer(), nullable=True),
    sa.Column('last_done_date', sa.Date(), nullable=True, comment='手動入力または連携された最終実施日'),
    sa.Column('last_done_km', sa.Integer(), nullable=True, comment='最終実施時の『総走行距離』(計算済み)'),
    sa.Column('last_done_odo', sa.Integer(), nullable=True, comment='最終実施時の『メーターODO値』(手動入力用)'),
    sa.Column('last_maintenance_entry_id', sa.Integer(), nullable=True),
    sa.Column('auto_update_from_category', sa.Boolean(), server_default='true', nullable=False, comment='カテゴリ名が一致した整備記録で自動更新するか'),
    sa.ForeignKeyConstraint(['last_maintenance_entry_id'], ['maintenance_entries.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['motorcycle_id'], ['motorcycles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('touring_scrapbook_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('touring_log_id', sa.Integer(), nullable=False),
    sa.Column('misskey_note_id', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['touring_log_id'], ['touring_logs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('touring_log_id', 'misskey_note_id', name='uq_touring_log_note')
    )
    with op.batch_alter_table('touring_scrapbook_entries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_touring_scrapbook_entries_misskey_note_id'), ['misskey_note_id'], unique=False)

    op.create_table('touring_spots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('touring_log_id', sa.Integer(), nullable=False),
    sa.Column('spot_name', sa.String(length=150), nullable=False),
    sa.Column('memo', sa.Text(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=False, comment='スポットの順序'),
    sa.Column('photo_link_url', sa.String(length=2048), nullable=True, comment='外部の写真URL'),
    sa.Column('latitude', sa.Float(), nullable=True, comment='緯度'),
    sa.Column('longitude', sa.Float(), nullable=True, comment='経度'),
    sa.Column('google_place_id', sa.String(length=255), nullable=True, comment='Google Place ID'),
    sa.ForeignKeyConstraint(['touring_log_id'], ['touring_logs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('touring_spots', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_touring_spots_touring_log_id'), ['touring_log_id'], unique=False)

    op.create_table('session_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_log_id', sa.Integer(), nullable=False),
    sa.Column('setting_sheet_id', sa.Integer(), nullable=True),
    sa.Column('session_name', sa.String(length=100), nullable=True),
    sa.Column('lap_times', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rider_feel', sa.Text(), nullable=True),
    sa.Column('operating_hours_start', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('operating_hours_end', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('odo_start', sa.Integer(), nullable=True),
    sa.Column('odo_end', sa.Integer(), nullable=True),
    sa.Column('session_duration_hours', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('session_distance', sa.Integer(), nullable=True),
    sa.Column('best_lap_seconds', sa.Numeric(precision=8, scale=3), nullable=True, comment='このセッションでのベストラップ（秒）'),
    sa.Column('include_in_leaderboard', sa.Boolean(), server_default='true', nullable=False, comment='この記録をリーダーボードに掲載するか'),
    sa.ForeignKeyConstraint(['activity_log_id'], ['activity_logs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['setting_sheet_id'], ['setting_sheets.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('session_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_session_logs_best_lap_seconds'), ['best_lap_seconds'], unique=False)

    # --- Step 3: 全テーブル作成後に、循環参照していた外部キーを追加 ---
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_foreign_key(
            'fk_users_garage_hero_vehicle_id',  # 制約名
            'motorcycles',                      # 参照先テーブル
            ['garage_hero_vehicle_id'],         # ローカルカラム
            ['id'],                             # 参照先カラム
            ondelete='SET NULL'
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # --- Step 1: `upgrade`で最後に追加した外部キーを最初に削除 ---
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('fk_users_garage_hero_vehicle_id', type_='foreignkey')

    # --- Step 2: `upgrade`とは逆の順序でテーブルを削除 ---
    with op.batch_alter_table('session_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_session_logs_best_lap_seconds'))
    op.drop_table('session_logs')

    with op.batch_alter_table('touring_spots', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_touring_spots_touring_log_id'))
    op.drop_table('touring_spots')

    with op.batch_alter_table('touring_scrapbook_entries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_touring_scrapbook_entries_misskey_note_id'))
    op.drop_table('touring_scrapbook_entries')
    
    op.drop_table('maintenance_reminders')
    
    with op.batch_alter_table('event_participants', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_participants_event_id'))
    op.drop_table('event_participants')
    
    op.drop_table('attachments')
    
    with op.batch_alter_table('activity_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_activity_logs_event_id'))
        batch_op.drop_index(batch_op.f('ix_activity_logs_circuit_name'))
        batch_op.drop_index(batch_op.f('ix_activity_logs_activity_date'))
    op.drop_table('activity_logs')

    with op.batch_alter_table('user_achievements', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_achievements_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_achievements_achievement_code'))
    op.drop_table('user_achievements')
    
    with op.batch_alter_table('touring_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_touring_logs_user_id'))
        batch_op.drop_index(batch_op.f('ix_touring_logs_touring_date'))
        batch_op.drop_index(batch_op.f('ix_touring_logs_motorcycle_id'))
    op.drop_table('touring_logs')

    with op.batch_alter_table('setting_sheets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_setting_sheets_sheet_name'))
    op.drop_table('setting_sheets')
    
    with op.batch_alter_table('odo_reset_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_odo_reset_logs_reset_date'))
    op.drop_table('odo_reset_logs')
    
    with op.batch_alter_table('maintenance_spec_sheets', schema=None) as batch_op:
        batch_op.drop_index('ix_maintenance_spec_sheets_user_id')
        batch_op.drop_index(batch_op.f('ix_maintenance_spec_sheets_sheet_name'))
        batch_op.drop_index('ix_maintenance_spec_sheets_motorcycle_id')
    op.drop_table('maintenance_spec_sheets')

    with op.batch_alter_table('maintenance_entries', schema=None) as batch_op:
        batch_op.drop_index('ix_maintenance_entries_maintenance_date')
        batch_op.drop_index('ix_maintenance_entries_category')
    op.drop_table('maintenance_entries')
    
    with op.batch_alter_table('general_notes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_general_notes_category'))
    op.drop_table('general_notes')
    
    with op.batch_alter_table('fuel_entries', schema=None) as batch_op:
        batch_op.drop_index('ix_fuel_entries_entry_date')
    op.drop_table('fuel_entries')

    with op.batch_alter_table('events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_events_public_id'))
        batch_op.drop_index(batch_op.f('ix_events_is_public'))
    op.drop_table('events')

    op.drop_table('consumable_logs')

    # --- Step 3: 最後に親テーブルを削除 ---
    op.drop_table('motorcycles')
    
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_public_id'))
    op.drop_table('users')

    with op.batch_alter_table('achievement_definitions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_achievement_definitions_trigger_event_type'))
        batch_op.drop_index(batch_op.f('ix_achievement_definitions_code'))
        batch_op.drop_index(batch_op.f('ix_achievement_definitions_category_code'))
    op.drop_table('achievement_definitions')
    
    # ### end Alembic commands ###
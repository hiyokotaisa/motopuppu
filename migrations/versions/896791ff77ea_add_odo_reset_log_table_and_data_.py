"""add_odo_reset_log_table_and_data_migration

Revision ID: 896791ff77ea
Revises: cb61b6485ca8
Create Date: 2025-05-06 14:21:50.148204

"""
from alembic import op
import sqlalchemy as sa
from datetime import date, datetime


# revision identifiers, used by Alembic.
revision = '896791ff77ea'
down_revision = 'cb61b6485ca8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('odo_reset_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('display_odo_before_reset', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('display_odo_after_reset', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('offset_increment', sa.Integer(), nullable=False))
        batch_op.drop_column('offset_change')
        batch_op.drop_column('odometer_before_reset')
        batch_op.drop_column('odometer_after_reset')

    # ### end Alembic commands ###
    # ▼▼▼ ここからデータ移行ロジックを追記 ▼▼▼
bind = op.get_bind()
# Session = sa.orm.Session(bind=bind) # Sessionの直接利用は不要な場合が多い

# Motorcycleモデルの簡易的な表現
motorcycle_table = sa.Table(
    'motorcycles',
    sa.MetaData(),
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('odometer_offset', sa.Integer)
    # もし車両登録日などを reset_date の仮日付として使いたい場合、
    # ここにそのカラムも定義し、クエリで取得する必要があります。
    # 例: sa.Column('created_at', sa.DateTime) 
)

# OdoResetLogモデルの簡易的な表現
odo_reset_log_table = sa.Table(
    'odo_reset_logs',
    sa.MetaData(),
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('motorcycle_id', sa.Integer),
    sa.Column('reset_date', sa.Date),
    sa.Column('display_odo_before_reset', sa.Integer),
    sa.Column('display_odo_after_reset', sa.Integer),
    sa.Column('offset_increment', sa.Integer),
    sa.Column('created_at', sa.DateTime) 
)

# odometer_offset > 0 の車両を取得
motorcycles_with_offset = []
conn = op.get_bind() # op.get_bind() を使用
result = conn.execute(
    sa.select(motorcycle_table.c.id, motorcycle_table.c.odometer_offset)
    .where(motorcycle_table.c.odometer_offset > 0)
)
for row in result:
    # SQLAlchemy 1.x/2.x 互換性を考慮し、属性アクセスを試みる
    try:
        mc_id = row.id
        offset_val = row.odometer_offset
        motorcycles_with_offset.append((mc_id, offset_val))
    except AttributeError:
         # 古いバージョンや環境によってはタプルアクセスになる場合も
         mc_id = row[0]
         offset_val = row[1]
         motorcycles_with_offset.append((mc_id, offset_val))

# 仮の「不明日」またはシステム導入初期を示す日付
default_reset_date = date(1900, 1, 1) 

logs_to_insert = []
current_time = datetime.utcnow() # 挿入時刻を統一
for mc_id, offset_val in motorcycles_with_offset:
    if offset_val is not None and offset_val > 0:
        logs_to_insert.append({
            'motorcycle_id': mc_id,
            'reset_date': default_reset_date, 
            'display_odo_before_reset': offset_val,
            'display_odo_after_reset': 0,
            'offset_increment': offset_val,
            'created_at': current_time 
        })

if logs_to_insert:
    # op を使ってバルクインサートを実行
    op.bulk_insert(odo_reset_log_table, logs_to_insert)

# Session.commit() は op を使っている場合は不要
# ▲▲▲ データ移行ロジックここまで ▲▲▲


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('odo_reset_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('odometer_after_reset', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('odometer_before_reset', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('offset_change', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_column('offset_increment')
        batch_op.drop_column('display_odo_after_reset')
        batch_op.drop_column('display_odo_before_reset')

    # ### end Alembic commands ###
